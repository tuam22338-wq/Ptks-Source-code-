import { Type } from "@google/genai";
import type { AiGeneratedModData, ModContentObject, CommunityMod } from '../../types';
import { ALL_ATTRIBUTES, TALENT_RANK_NAMES, WORLD_MAP, PHAP_BAO_RANKS, COMMUNITY_MODS_URL } from "../../constants";
import { generateWithRetry } from './gemini.core';
import * as db from '../dbService';

export const fetchCommunityMods = async (): Promise<CommunityMod[]> => {
    try {
        const response = await fetch(COMMUNITY_MODS_URL);
        if (!response.ok) {
            throw new Error(`Network response was not ok, status: ${response.status}`);
        }
        const data: CommunityMod[] = await response.json();
        return data;
    } catch (error) {
        console.error("Failed to fetch community mods:", error);
        return [{
            modInfo: {
                id: 'fallback-mod-example',
                name: 'Th·∫ßn Binh L·ª£i Kh√≠ (V√≠ d·ª•)',
                author: 'Game Master',
                description: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch mod c·ªông ƒë·ªìng. ƒê√¢y l√† m·ªôt v√≠ d·ª• m·∫´u c√≥ s·∫µn.',
                version: '1.0.0',
            },
            downloadUrl: 'https://gist.githubusercontent.com/world-class-dev/2c1b2c6e6152a5a5d852c0021c32c4e2/raw/phongthan-thanbinh-loikhi.json'
        }];
    }
};

export const generateModContentFromPrompt = async (prompt: string, modContext: any): Promise<AiGeneratedModData> => {
    const statBonusSchema = { type: Type.OBJECT, properties: { attribute: { type: Type.STRING, enum: ALL_ATTRIBUTES }, value: { type: Type.NUMBER } }, required: ['attribute', 'value'] };
    
    const modItemSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['item'] },
            name: { type: Type.STRING },
            description: { type: Type.STRING },
            type: { type: Type.STRING, enum: ['V≈© Kh√≠', 'Ph√≤ng C·ª•', 'ƒêan D∆∞·ª£c', 'Ph√°p B·∫£o', 'T·∫°p V·∫≠t', 'ƒêan L√¥', 'Linh D∆∞·ª£c', 'ƒêan Ph∆∞∆°ng', 'Nguy√™n Li·ªáu'] },
            quality: { type: Type.STRING, enum: ['Ph√†m Ph·∫©m', 'Linh Ph·∫©m', 'Ph√°p Ph·∫©m', 'B·∫£o Ph·∫©m', 'Ti√™n Ph·∫©m', 'Tuy·ªát Ph·∫©m'] },
            weight: { type: Type.NUMBER },
            value: { type: Type.NUMBER, description: "Gi√° tr·ªã c∆° b·∫£n c·ªßa v·∫≠t ph·∫©m b·∫±ng B·∫°c. H·ªØu √≠ch cho vi·ªác b√°n." },
            slot: { type: Type.STRING, enum: ['V≈© Kh√≠', 'Th∆∞·ª£ng Y', 'H·∫° Y', 'Gi√†y', 'Ph·ª• Ki·ªán 1', 'Ph·ª• Ki·ªán 2'], description: "V·ªã tr√≠ trang b·ªã n·∫øu v·∫≠t ph·∫©m l√† V≈© Kh√≠ ho·∫∑c Ph√≤ng C·ª•." },
            bonuses: { type: Type.ARRAY, items: statBonusSchema },
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
            icon: { type: Type.STRING, description: "M·ªôt emoji ph√π h·ª£p v·ªõi v·∫≠t ph·∫©m, v√≠ d·ª• '‚öîÔ∏è' cho ki·∫øm, 'üíä' cho ƒëan d∆∞·ª£c."}
        },
        required: ['contentType', 'name', 'description', 'type', 'quality', 'weight']
    };

    const modTalentSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['talent'] },
            name: { type: Type.STRING },
            description: { type: Type.STRING },
            rank: { type: Type.STRING, enum: TALENT_RANK_NAMES },
            bonuses: { type: Type.ARRAY, items: statBonusSchema },
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
        },
        required: ['contentType', 'name', 'description', 'rank']
    };

    const modCharacterSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['character'] },
            name: { type: Type.STRING },
            gender: { type: Type.STRING, enum: ['Nam', 'N·ªØ'] },
            origin: { type: Type.STRING },
            appearance: { type: Type.STRING },
            personality: { type: Type.STRING },
            bonuses: { type: Type.ARRAY, items: statBonusSchema },
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
        },
        required: ['contentType', 'name', 'gender', 'origin', 'appearance', 'personality']
    };
    
    const modSectSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['sect'] },
            name: { type: Type.STRING },
            description: { type: Type.STRING },
            location: { type: Type.STRING },
            members: { type: Type.ARRAY, items: {
                type: Type.OBJECT,
                properties: {
                    name: { type: Type.STRING },
                    rank: { type: Type.STRING, enum: ['T√¥ng Ch·ªß', 'Tr∆∞·ªüng L√£o', 'ƒê·ªá T·ª≠ Ch√¢n Truy·ªÅn', 'ƒê·ªá T·ª≠ N·ªôi M√¥n', 'ƒê·ªá T·ª≠ Ngo·∫°i M√¥n'] },
                },
                required: ['name', 'rank']
            }},
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
        },
        required: ['contentType', 'name', 'description', 'location']
    };
    
    const modWorldBuildingSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['worldBuilding'] },
            title: { type: Type.STRING },
            description: { type: Type.STRING },
            data: { type: Type.STRING, description: "M·ªôt chu·ªói JSON ch·ª©a d·ªØ li·ªáu t√πy ch·ªânh. V√≠ d·ª•: '{\"population\": 1000, \"ruler\": \"Lord Smith\"}'" },
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
        },
        required: ['contentType', 'title', 'data']
    };
    
    const modNpcSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['npc'] },
            name: { type: Type.STRING },
            status: { type: Type.STRING },
            description: { type: Type.STRING, description: "M√¥ t·∫£ ngo·∫°i h√¨nh" },
            origin: { type: Type.STRING },
            personality: { type: Type.STRING },
            locationId: { type: Type.STRING, enum: WORLD_MAP.map(l => l.id) },
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
        },
        required: ['contentType', 'name', 'status', 'description', 'origin', 'personality', 'locationId']
    };
    
    const modTechniqueSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['technique'] },
            name: { type: Type.STRING },
            description: { type: Type.STRING },
            type: { type: Type.STRING, enum: ['Linh K·ªπ', 'Th·∫ßn Th√¥ng', 'ƒê·ªôn Thu·∫≠t', 'Tuy·ªát K·ªπ'] },
            cost: { type: Type.OBJECT, properties: { type: { type: Type.STRING, enum: ['Linh L·ª±c', 'Sinh M·ªánh', 'Nguy√™n Th·∫ßn'] }, value: { type: Type.NUMBER } }, required: ['type', 'value'] },
            cooldown: { type: Type.NUMBER },
            rank: { type: Type.STRING, enum: Object.keys(PHAP_BAO_RANKS) as any },
            icon: { type: Type.STRING, description: "M·ªôt emoji bi·ªÉu t∆∞·ª£ng" },
            effects: { type: Type.ARRAY, items: {
                type: Type.OBJECT,
                properties: {
                    type: { type: Type.STRING, enum: ['DAMAGE', 'HEAL', 'BUFF', 'DEBUFF'] },
                    details: { type: Type.STRING, description: "M·ªôt chu·ªói JSON ch·ª©a chi ti·∫øt hi·ªáu ·ª©ng. V√≠ d·ª•: '{\"element\": \"fire\", \"base\": 10}'" }
                },
                required: ['type', 'details']
            }},
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
        },
        required: ['contentType', 'name', 'description', 'type', 'cost', 'cooldown', 'rank', 'icon']
    };
    
    const modRecipeSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['recipe'] },
            name: { type: Type.STRING },
            description: { type: Type.STRING },
            ingredients: { type: Type.ARRAY, items: {
                type: Type.OBJECT,
                properties: {
                    name: { type: Type.STRING },
                    quantity: { type: Type.NUMBER }
                },
                required: ['name', 'quantity']
            }},
            result: { type: Type.OBJECT, properties: { name: { type: Type.STRING }, quantity: { type: Type.NUMBER } }, required: ['name', 'quantity'] },
            requiredAttribute: { type: Type.OBJECT, properties: { name: { type: Type.STRING, enum: ['Ng·ª± Kh√≠ Thu·∫≠t'] }, value: { type: Type.NUMBER } }, required: ['name', 'value'] },
            icon: { type: Type.STRING, description: "M·ªôt emoji bi·ªÉu t∆∞·ª£ng" },
        },
        required: ['contentType', 'name', 'ingredients', 'result', 'requiredAttribute']
    };
    
    const modEventSchema = {
         type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['event'] },
            name: { type: Type.STRING },
            description: { type: Type.STRING },
            choices: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        text: { type: Type.STRING },
                    },
                    required: ['text']
                }
            },
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
        },
        required: ['contentType', 'name', 'description', 'choices']
    };
    
    const modCustomPanelSchema = {
        type: Type.OBJECT,
        properties: {
            contentType: { type: Type.STRING, enum: ['customPanel'] },
            title: { type: Type.STRING },
            iconName: { type: Type.STRING, enum: ['FaBook', 'FaGlobe', 'FaScroll', 'FaSun', 'FaGopuram'] },
            content: { type: Type.ARRAY, items: { type: Type.STRING }, description: "Danh s√°ch c√°c ti√™u ƒë·ªÅ c·ªßa m·ª•c WorldBuilding" },
            tags: { type: Type.ARRAY, items: { type: Type.STRING } },
        },
        required: ['contentType', 'title', 'iconName', 'content']
    };

    const allSchemas = [
        modItemSchema, modTalentSchema, modCharacterSchema, modSectSchema, modWorldBuildingSchema,
        modNpcSchema, modTechniqueSchema, modEventSchema, modRecipeSchema, modCustomPanelSchema
    ];

    const finalSchema = {
        type: Type.OBJECT,
        properties: {
            content: {
                type: Type.ARRAY,
                description: "Danh s√°ch c√°c n·ªôi dung game ƒë∆∞·ª£c t·∫°o ra (v·∫≠t ph·∫©m, ti√™n t∆∞, etc.)",
                items: {
                    oneOf: allSchemas
                }
            },
            realmConfigs: {
                type: Type.ARRAY,
                description: "M·ªôt h·ªá th·ªëng c·∫£nh gi·ªõi tu luy·ªán ho√†n ch·ªânh.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        name: { type: Type.STRING },
                        stages: {
                            type: Type.ARRAY,
                            items: {
                                type: Type.OBJECT,
                                properties: {
                                    name: { type: Type.STRING },
                                    qiRequired: { type: Type.NUMBER },
                                    bonuses: { type: Type.ARRAY, items: statBonusSchema }
                                },
                                required: ['name', 'qiRequired']
                            }
                        }
                    },
                    required: ['name', 'stages']
                }
            },
            talentSystemConfig: {
                type: Type.OBJECT,
                properties: {
                    systemName: { type: Type.STRING },
                    choicesPerRoll: { type: Type.NUMBER },
                    maxSelectable: { type: Type.NUMBER },
                    allowAIGeneratedTalents: { type: Type.BOOLEAN },
                }
            }
        }
    };

    const fullPrompt = `B·∫°n l√† m·ªôt Game Master AI cho game tu ti√™n "Tam Thi√™n Th·∫ø Gi·ªõi".
Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra n·ªôi dung m·ªõi cho m·ªôt b·∫£n mod d·ª±a tr√™n y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.

**B·ªëi c·∫£nh mod hi·ªán t·∫°i (n·∫øu c√≥):**
${JSON.stringify(modContext, null, 2)}

**H∆∞·ªõng d·∫´n v√† V√≠ d·ª•:**
- **T·∫°o V·∫≠t Ph·∫©m (item):** 'T·∫°o m·ªôt thanh phi ki·∫øm t√™n L∆∞u Tinh, ph·∫©m ch·∫•t Ti√™n Ph·∫©m, tƒÉng 20 Th√¢n Ph√°p.'
  - C√°c tham s·ªë ch√≠nh: name, description, type, quality, weight, bonuses (thu·ªôc t√≠nh & gi√° tr·ªã), tags, slot (n·∫øu l√† trang b·ªã), value (gi√° tr·ªã), icon (emoji).
  - **H√£y s√°ng t·∫°o icon v√† m√¥ t·∫£ th·∫≠t chi ti·∫øt, ƒë·ªôc ƒë√°o!**
- **T·∫°o Ti√™n T∆∞ (talent):** 'T·∫°o m·ªôt ti√™n t∆∞ Th√°nh Giai t√™n B·∫•t Di·ªát Th√°nh Th·ªÉ, tƒÉng 500 CƒÉn C·ªët v√† 1000 Sinh M·ªánh.'
  - C√°c tham s·ªë ch√≠nh: name, description, rank, bonuses, tags.
- **T·∫°o NPC:** 'T·∫°o m·ªôt NPC l√† tr∆∞·ªüng l√£o t√† ph√°i t√™n H·∫Øc Ma L√£o T·ªï, ·ªü ƒë·ªãa ƒëi·ªÉm H·∫Øc Long ƒê√†m, tr·∫°ng th√°i ƒëang luy·ªán c√¥ng.'
  - C√°c tham s·ªë ch√≠nh: name, status, description (ngo·∫°i h√¨nh), origin, personality, locationId, tags.
- **T·∫°o C√¥ng Ph√°p Ph·ª• (auxiliaryTechnique):** 'T·∫°o m·ªôt th·∫ßn th√¥ng t√™n l√† H·ªèa Long Thu·∫≠t, c·∫•p ƒê·ªãa Giai, ti√™u hao 100 linh l·ª±c, g√¢y s√°t th∆∞∆°ng h·ªèa.'
  - C√°c tham s·ªë ch√≠nh: name, description, type, cost, cooldown, rank, icon, requirements, effects, tags.
- **T·∫°o T√¥ng M√¥n (sect):** 'T·∫°o m·ªôt t√¥ng m√¥n t√™n l√† Thanh V√¢n M√¥n, ·ªü Thanh Loan S∆°n, l√† ch√≠nh ph√°i chuy√™n tu luy·ªán ki·∫øm ƒë·∫°o.'
  - C√°c tham s·ªë ch√≠nh: name, description, location, members, tags.
- **T·∫°o nhi·ªÅu ƒë·ªëi t∆∞·ª£ng:** 'T·∫°o 5 lo·∫°i linh d∆∞·ª£c kh√°c nhau ph·∫©m ch·∫•t Linh Ph·∫©m.'

**Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng:**
"${prompt}"

D·ª±a v√†o y√™u c·∫ßu, h√£y t·∫°o ra c√°c ƒë·ªëi t∆∞·ª£ng n·ªôi dung game ph√π h·ª£p v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t theo schema ƒë√£ cung c·∫•p.
**QUAN TR·ªåNG**: ∆Øu ti√™n t·∫°o n·ªôi dung trong m·∫£ng 'content'. Ch·ªâ t·∫°o 'realmConfigs' ho·∫∑c 'talentSystemConfig' n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu r√µ r√†ng.
H√£y s√°ng t·∫°o v√† ƒë·∫£m b·∫£o n·ªôi dung ph√π h·ª£p v·ªõi b·ªëi c·∫£nh ti√™n hi·ªáp.
    `;

    const settings = await db.getSettings();
    const specificApiKey = settings?.modelApiKeyAssignments?.gameMasterModel;
    const response = await generateWithRetry({
        model: settings?.gameMasterModel || 'gemini-2.5-flash',
        contents: fullPrompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: finalSchema,
        }
    }, specificApiKey);

    try {
        const json = JSON.parse(response.text.trim());

        // Post-process stringified JSON from AI
        if (json.content) {
            json.content.forEach((c: any) => {
                if (c.contentType === 'worldBuilding' && typeof c.data === 'string') {
                    try { c.data = JSON.parse(c.data); } catch (e) { 
                        console.warn('Failed to parse worldBuilding data string from AI:', c.data); 
                        c.data = {}; 
                    }
                }
                if (c.contentType === 'technique' && c.effects) {
                    c.effects.forEach((effect: any) => {
                        if (typeof effect.details === 'string') {
                            try { effect.details = JSON.parse(effect.details); } catch (e) { 
                                console.warn('Failed to parse technique details string from AI:', effect.details); 
                                effect.details = {}; 
                            }
                        }
                    });
                }
            });
        }

        return json as AiGeneratedModData;
    } catch (e) {
        console.error("Failed to parse AI response for mod content:", e);
        console.error("Raw AI response:", response.text);
        throw new Error("AI ƒë√£ tr·∫£ v·ªÅ d·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá.");
    }
};