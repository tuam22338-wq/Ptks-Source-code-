import React, { memo } from 'react';
import type { GameSettings, NarrativeStyle, AIModel } from '../../../types';
import { AI_MODELS, NARRATIVE_STYLES } from '../../../constants';
import { FaCrown, FaFire } from 'react-icons/fa';

interface SettingsSectionProps {
    title: string;
    children: React.ReactNode;
}
const SettingsSection: React.FC<SettingsSectionProps> = ({ title, children }) => (
  <section className="mb-10">
    <h3 className="text-xl font-bold font-title mb-4 pb-2 border-b border-[var(--shadow-light)]" style={{color: 'var(--text-color)'}}>{title}</h3>
    <div className="space-y-4">{children}</div>
  </section>
);

interface SettingsRowProps {
    label: string;
    description: string;
    children: React.ReactNode;
    disabled?: boolean;
}
const SettingsRow: React.FC<SettingsRowProps> = ({ label, description, children, disabled = false }) => (
  <div className={`neumorphic-inset-box p-4 flex flex-col md:flex-row gap-4 items-start ${disabled ? 'opacity-50' : ''}`}>
    <div className="md:w-1/3 flex-shrink-0">
      <label className="block font-semibold" style={{color: 'var(--text-color)'}}>{label}</label>
      <p className="text-sm mt-1" style={{color: 'var(--text-muted-color)'}}>{description}</p>
    </div>
    <div className="md:w-2/3">{children}</div>
  </div>
);

interface NovelistSettingsProps {
    settings: GameSettings;
    handleSettingChange: (key: keyof GameSettings, value: any) => void;
}

const NovelistSettings: React.FC<NovelistSettingsProps> = ({ settings, handleSettingChange }) => {
    const novelistModels = AI_MODELS.filter(m => m.value === 'gemini-2.5-flash' || m.value === 'gemini-2.5-pro');

    return (
        <SettingsSection title="C√†i ƒê·∫∑t Ti·ªÉu Thuy·∫øt Gia AI">
             <SettingsRow label="B·∫≠t Ch·∫ø ƒê·ªô NSFW (18+)" description="K√≠ch ho·∫°t ch·∫ø ƒë·ªô NSFW cho Ti·ªÉu Thuy·∫øt Gia AI. Khi b·∫≠t, AI s·∫Ω t·∫°o ra n·ªôi dung ng∆∞·ªùi l·ªõn chi ti·∫øt, kh√¥ng che ƒë·∫≠y v√† b·ªè qua c√°c b·ªô l·ªçc an to√†n.">
                <div className="flex flex-col">
                    <label className="flex items-center cursor-pointer">
                        <input type="checkbox" checked={settings.enableNovelistNsfwMode} onChange={e => handleSettingChange('enableNovelistNsfwMode', e.target.checked)} className="w-5 h-5 text-amber-500 bg-gray-700 border-gray-600 rounded focus:ring-amber-600 focus:ring-2 cursor-pointer" />
                        <span className="ml-3 text-sm font-bold text-red-400 flex items-center gap-2"><FaFire /> B·∫≠t ch·∫ø ƒë·ªô 18+ cho Ti·ªÉu Thuy·∫øt Gia</span>
                    </label>
                    {settings.enableNovelistNsfwMode && (
                         <div className="mt-2 text-xs p-2 rounded-md bg-red-900/30 border border-red-500/50 text-red-300">
                            <strong>C·∫¢NH B√ÅO TUY·ªÜT ƒê·ªêI:</strong> B·∫°n ƒë√£ b·∫≠t ch·∫ø ƒë·ªô 18+. AI s·∫Ω ƒë∆∞·ª£c ch·ªâ th·ªã ƒë·ªÉ t·∫°o ra c√°c n·ªôi dung ng∆∞·ªùi l·ªõn c·ª±c k·ª≥ chi ti·∫øt v√† kh√¥ng b·ªã ki·ªÉm duy·ªát, bao g·ªìm b·∫°o l·ª±c c·ª±c ƒëoan, n·ªôi dung t√¨nh d·ª•c chi ti·∫øt (k·ªÉ c·∫£ c√°c ch·ªß ƒë·ªÅ c·ª±c ƒëoan), v√† kinh d·ªã.
                        </div>
                    )}
                </div>
            </SettingsRow>
            <SettingsRow label="Model S√°ng T√°c" description="Ch·ªçn model AI ƒë·ªÉ s·ª≠ d·ª•ng cho vi·ªác vi·∫øt ti·ªÉu thuy·∫øt. Model Pro cho ch·∫•t l∆∞·ª£ng cao h∆°n nh∆∞ng y√™u c·∫ßu G√≥i ƒê·∫°o T√¥n.">
                <select 
                    className="input-neumorphic w-full" 
                    value={settings.novelistModel} 
                    onChange={(e) => handleSettingChange('novelistModel', e.target.value)}
                >
                    {novelistModels.map(model => {
                        const isPremium = model.value.includes('pro');
                        const isDisabled = isPremium && !settings.isPremium;
                        return (
                            <option key={model.value} value={model.value} disabled={isDisabled} className={isDisabled ? 'text-gray-500' : ''}>
                                {model.label} {isPremium ? 'üëë' : ''}
                            </option>
                        );
                    })}
                </select>
            </SettingsRow>
            <SettingsRow label="VƒÉn Phong T∆∞·ªùng Thu·∫≠t" description="Ch·ªçn vƒÉn phong v√† gi·ªçng ƒëi·ªáu cho AI, ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn k·∫øt qu·∫£ s√°ng t√°c.">
                <select 
                    className="input-neumorphic w-full"
                    value={settings.novelistNarrativeStyle} 
                    onChange={(e) => handleSettingChange('novelistNarrativeStyle', e.target.value as NarrativeStyle)}
                >
                    {NARRATIVE_STYLES.map(style => (
                        <option key={style.value} value={style.value}>{style.label}</option>
                    ))}
                </select>
            </SettingsRow>
            <SettingsRow label="ƒê·ªô d√†i m·ªói ch∆∞∆°ng (S·ªë t·ª´)" description="ƒê·∫∑t ƒë·ªô d√†i mong mu·ªën cho m·ªói l·∫ßn AI vi·∫øt ti·∫øp c√¢u chuy·ªán.">
                <div className="flex items-center gap-4">
                    <input 
                        type="range" 
                        min="100" 
                        max="7000" 
                        step="100" 
                        value={settings.novelistWordCount} 
                        onChange={(e) => handleSettingChange('novelistWordCount', parseInt(e.target.value))} 
                        className="w-full h-2 rounded-lg appearance-none cursor-pointer flex-grow" 
                    />
                    <span className="font-mono text-sm neumorphic-inset-box px-3 py-1 text-[var(--text-color)] w-24 text-center">{settings.novelistWordCount}</span>
                </div>
            </SettingsRow>
             <SettingsRow label="Nhi·ªát ƒë·ªô (Temperature)" description="Ki·ªÉm so√°t m·ª©c ƒë·ªô s√°ng t·∫°o/ng·∫´u nhi√™n c·ªßa AI. Gi√° tr·ªã cao h∆°n cho k·∫øt qu·∫£ ƒëa d·∫°ng, gi√° tr·ªã th·∫•p h∆°n cho k·∫øt qu·∫£ nh·∫•t qu√°n h∆°n.">
                <div className="flex items-center gap-4">
                    <input type="range" min="0" max="2" step="0.1" value={settings.novelistTemperature} onChange={(e) => handleSettingChange('novelistTemperature', parseFloat(e.target.value))} className="w-full h-2 rounded-lg appearance-none cursor-pointer flex-grow" />
                    <span className="font-mono text-sm neumorphic-inset-box px-3 py-1 text-[var(--text-color)] w-20 text-center">{settings.novelistTemperature.toFixed(1)}</span>
                </div>
            </SettingsRow>
            <SettingsRow label="Top-K" description="Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng token c√≥ kh·∫£ nƒÉng cao nh·∫•t m√† AI xem x√©t ·ªü m·ªói b∆∞·ªõc.">
                <div className="flex items-center gap-4">
                    <input type="range" min="1" max="128" step="1" value={settings.novelistTopK} onChange={(e) => handleSettingChange('novelistTopK', parseInt(e.target.value))} className="w-full h-2 rounded-lg appearance-none cursor-pointer flex-grow" />
                    <span className="font-mono text-sm neumorphic-inset-box px-3 py-1 text-[var(--text-color)] w-20 text-center">{settings.novelistTopK}</span>
                </div>
            </SettingsRow>
            <SettingsRow label="Top-P" description="Ch·ªçn c√°c token c√≥ x√°c su·∫•t t√≠ch l≈©y ƒë·∫°t ƒë·∫øn m·ªôt ng∆∞·ª°ng nh·∫•t ƒë·ªãnh.">
                <div className="flex items-center gap-4">
                    <input type="range" min="0" max="1" step="0.05" value={settings.novelistTopP} onChange={(e) => handleSettingChange('novelistTopP', parseFloat(e.target.value))} className="w-full h-2 rounded-lg appearance-none cursor-pointer flex-grow" />
                    <span className="font-mono text-sm neumorphic-inset-box px-3 py-1 text-[var(--text-color)] w-20 text-center">{settings.novelistTopP.toFixed(2)}</span>
                </div>
            </SettingsRow>
            <SettingsRow label="B·∫≠t 'Suy Nghƒ©' (Thinking)" description="Cho ph√©p model suy nghƒ© tr∆∞·ªõc khi tr·∫£ l·ªùi ƒë·ªÉ c√≥ ch·∫•t l∆∞·ª£ng cao h∆°n (ch·ªâ cho gemini-2.5-flash).">
                <label className="flex items-center cursor-pointer">
                    <input type="checkbox" checked={settings.novelistEnableThinking} onChange={e => handleSettingChange('novelistEnableThinking', e.target.checked)} className="w-5 h-5 text-amber-500 bg-gray-700 border-gray-600 rounded focus:ring-amber-600 focus:ring-2 cursor-pointer" />
                    <span className="ml-3 text-sm" style={{color: 'var(--text-color)'}}>B·∫≠t Thinking</span>
                </label>
            </SettingsRow>
            <SettingsRow label="Ng√¢n s√°ch 'Suy Nghƒ©' (Thinking Budget)" description="L∆∞·ª£ng token t·ªëi ƒëa m√† model c√≥ th·ªÉ d√πng ƒë·ªÉ 'suy nghƒ©'. Gi√° tr·ªã cao h∆°n c√≥ th·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng nh∆∞ng tƒÉng ƒë·ªô tr·ªÖ." disabled={!settings.novelistEnableThinking}>
                <div className="flex items-center gap-4">
                    <input type="range" min="0" max="8000" step="100" value={settings.novelistThinkingBudget} onChange={(e) => handleSettingChange('novelistThinkingBudget', parseInt(e.target.value))} className="w-full h-2 rounded-lg appearance-none cursor-pointer flex-grow" disabled={!settings.novelistEnableThinking}/>
                    <span className="font-mono text-sm neumorphic-inset-box px-3 py-1 text-[var(--text-color)] w-20 text-center">{settings.novelistThinkingBudget}</span>
                </div>
            </SettingsRow>
        </SettingsSection>
    );
};

export default memo(NovelistSettings);